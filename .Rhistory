upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
library("reshape2", lib.loc="~/R/win-library/3.5")
data_numeric <- as.data.frame(sapply(data, norminal_to_numeric))
data_reduced<- data_numeric[,c(2,3,4,7,8,10,12)]
cormat <- cor(data_reduced, use = "pairwise.complete.obs")
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat
plot(melted_cormat)
corrplot(melted_cormat)
library("corrplot", lib.loc="~/R/win-library/3.5")
corrplot(melted_cormat)
ggplot_pearsoncormat <- ggplot(data = melted_cormat, aes(Var2, Var1)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
library("ggplot2", lib.loc="~/R/win-library/3.5")
ggplot_pearsoncormat
ggplot_pearsoncormat <- ggplot(data = melted_cormat, aes(Var2, Var1)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
ggplot_pearsoncormat
ggplot(data = melted_cormat, aes(Var2, Var1)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
melted_cormat
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=round(value, digits = 2)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=round(value, digits = 2)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
View(melted_cormat)
View(melted_cormat)
melted_cormat %>% mutate_at(vars(value), funs(round(., 2)))
library("dplyr", lib.loc="~/R/win-library/3.5")
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
melted_cormat %>% mutate_at(vars(value), funs(round(., 2)))
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
melted_cormat %>% mutate_at(vars(value), funs(round(., 2)))
View(melted_cormat)
melted_cormat <- melted_cormat %>% mutate_at(vars(value), funs(round(., 2)))
View(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
View(data_reduced)
test<-lapply(data_reduced,as.integer)
library(sjPlot)
sjp.corr(test)
install.packages("sjPlot")
test<-lapply(data_reduced,as.integer)
library(sjPlot)
sjp.corr(test)
library(sjPlot)
detach("package:sjPlot", unload=TRUE)
library("sjPlot", lib.loc="~/R/win-library/3.5")
sjp.corr(test)
test[]<-lapply(data_reduced,as.integer)
library(sjPlot)
sjp.corr(test)
View(test)
sjt.corr(DF)
sjt.corr(test)
test[]<-as.data.frame.matrix(lapply(data_reduced,as.integer))
test <- as.matrix(test)
sjp.corr(test)
View(test)
data_numeric <- as.data.frame(sapply(data, norminal_to_numeric))
data_reduced<- data_numeric[,c(2,3,4,7,8,10,12)]
cormat <- cor(data_reduced, use = "pairwise.complete.obs")
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat <- melted_cormat %>% mutate_at(vars(value), funs(round(., 2)))
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_fixed()
aov(Shipper.Country ~ Shipper.City, data = data)
aov(Port.of.Entry..map. ~ Goods.Category, data = data)
aov(Port.of.Entry..map. ~ Compliant..Y.N., data = data)
library(naivebayes)
load("P:/Wood-Packaging-Compliance-Analysis/wpm-predictor/rpartData.RData")
NBclassfier <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Month + Packaging.Material ,
data=cart_data_training)
library(caret)
library(e1071)
NBclassfier <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Month + Packaging.Material ,
data=cart_data_training)
print(NBclassfier)
testPred <- predict(NBclassfier, newdata= cart_data_testing, type = "class")
confusionMatrix(testPred, cart_data_testing$Compliant..Y.N.)
View(data)
data_under<-ovun.sample(Compliant..Y.N.~., data=data_training, p=0.5, seed=1,  method="under")
install.packages("ROSE")
library(ROSE)
data_under<-ovun.sample(Compliant..Y.N.~., data=data_training, p=0.5, seed=1,  method="under")
training_index <- createDataPartition(data$Compliant..Y.N., p = 0.8, list = FALSE)
data_training <- data[training_index, ]
data_testing <- data[-training_index, ]
data_under<-ovun.sample(Compliant..Y.N.~., data=data_training, p=0.5, seed=1,  method="under")
data_under<-ovun.sample(Compliant..Y.N.~., data=data_training, p=0.5, seed=1,  method="under")
View(data_under)
data_under<-ovun.sample(Compliant..Y.N.~., data=data_training, p=0.5, seed=1,  method="under")$data
View(data_under)
#undersampled model
NBclassfier <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_under)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_under)
#Making predictions on undersampled model
testPred <- predict(NBclassfier_under, newdata= cart_data_testing, type = "class")
#confusion matrix
confusionMatrix(testPred, cart_data_testing$Compliant..Y.N.)
data_over<-ovun.sample(Compliant..Y.N.~., data=data_training,  p=0.5, seed=1,  method="over")$data
#oversampled dataset
data_over<-ovun.sample(Compliant..Y.N.~., data=data_training,  p=0.5, seed=1,  method="over")$data
#oversampled model
NBclassfier_over <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_over)
#Making predictions on oversampled model
testPred <- predict(NBclassfier_over, newdata= cart_data_testing, type = "class")
#confusion matrix
confusionMatrix(testPred, cart_data_testing$Compliant..Y.N.)
#data partition
training_index <- createDataPartition(data$Compliant..Y.N., p = 0.8, list = FALSE)
data_training <- data[training_index, ]
data_testing <- data[-training_index, ]
#undersampled dataset
data_under<-ovun.sample(Compliant..Y.N.~., data=data_training, p=0.5, seed=1,  method="under")$data
#Create model
NBclassfier <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data)
#make predictions on testing set
pred_NB <- predict(NBclassfier, newdata= cart_data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB, cart_data_testing$Compliant..Y.N.)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= cart_data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, cart_data_testing$Compliant..Y.N.)
#oversampled dataset
data_over<-ovun.sample(Compliant..Y.N.~., data=data_training,  p=0.5, seed=1,  method="over")$data
#oversampled model
NBclassfier_over <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_over)
#Making predictions on oversampled model
pred_NB_over <- predict(NBclassfier_over, newdata= cart_data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_over, cart_data_testing$Compliant..Y.N.)
model<- C5.0(x = data_training[3], y = data_training$Compliant..Y.N.)
library(C50)
training_index <- createDataPartition(data$Compliant..Y.N., p = 0.8, list = FALSE)
data_training <- data[training_index, ]
data_testing <- data[-training_index, ]
model<- C5.0(x = data_training[3], y = data_training$Compliant..Y.N.)
summary(model)
View(data)
library(libsvm)
install.packages("e1071")
library("e1071", lib.loc="~/R/win-library/3.4")
svm_model <- svm(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data)
pred_SVM <- predict(svm_model, newdata= data_testing, type = "class")
confusionMatrix(pred_SVM, data_testing$Compliant..Y.N.)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Shipper.Name ,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, data_testing$Compliant..Y.N.)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category ,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, data_testing$Compliant..Y.N.)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category , Shipper.Name, Consignee.Name
data=data_under)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Shipper.Name + Consignee.Name
data=data_under)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Shipper.Name + Consignee.Name,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, data_testing$Compliant..Y.N.)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Shipper.Name + Consignee.Name + Packaging.Material,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, data_testing$Compliant..Y.N.)
#undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, data_testing$Compliant..Y.N.)
svm_model_under <- svm(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_under)
pred_SVM_under <- predict(svm_model_under, newdata= data_testing, type = "class")
confusionMatrix(pred_SVM, data_testing$Compliant..Y.N.)
#SVM model with oversampling
svm_model_over <- svm(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_over)
pred_SVM_over <- predict(svm_model_over, newdata= data_testing, type = "class")
confusionMatrix(pred_SVM, data_testing$Compliant..Y.N.)
library("caret", lib.loc="~/R/win-library/3.4")
library("caret", lib.loc="~/R/win-library/3.4")
detach("package:caret", unload=TRUE)
install.packages("caret")
library("caret", lib.loc="~/R/win-library/3.4")
View(data_training)
#naieve bayes with crossvalidation
NBclassifier_cv<- train(
y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)]
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#naieve bayes with crossvalidation
NBclassifier_cv<- train(
y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
NBclassifier_cv<- train(
y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#predictions
pred_NB_cv <- predict(NBclassfier_cv, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_cv, data_testing$Compliant..Y.N.)
#predictions
pred_NB_cv <- predict(NBclassifier_cv, newdata= data_testing, type = "class")
#predictions
pred_NB_cv <- predict(NBclassifier_cv, newdata= data_testing, type = "raw")
#confusion matrix
confusionMatrix(pred_NB_cv, data_testing$Compliant..Y.N.)
#Create NB oversampled model with CV
NBclassifier_cv<- train(y = data_over$Compliant..Y.N.,
x = data_over[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#Create NB oversampled model with CV
NBclassfier_cv<- train(y = data_over$Compliant..Y.N.,
x = data_over[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#Create NB oversampled model with CV
NBclassfier_cv_over<- train(y = data_over$Compliant..Y.N.,
x = data_over[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#predictions
pred_NB_cv_over <- predict(NBclassfier_cv_over, newdata= data_testing, type = "raw")
#confusion matrix
confusionMatrix(pred_NB_cv_over, data_testing$Compliant..Y.N.)
models <- list(original = NBclassfier,
crossvalidated = NBclassfier_cv)
models <- list(original = NBclassfier,
crossvalidated = NBclassfier_cv_over)
models_resampling <- resamples(models)
#Create naive bayes model with crossvalidation
NBclassfier_cv<- train(y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
models <- list(original = NBclassfier_cv,
crossvalidated = NBclassfier_cv_over)
models_resampling <- resamples(models)
bwplot(models_resampling)
NBclassfier_cv_under<- train(y = data_under$Compliant..Y.N.,
x = data_under[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#predictions
pred_NB_cv_under <- predict(NBclassfier_cv_under, newdata= data_testing, type = "raw")
#confusion matrix
confusionMatrix(pred_NB_cv_under, data_testing$Compliant..Y.N.)
#Create NB model
NBclassfier <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data)
#make predictions on testing set
pred_NB <- predict(NBclassfier, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB, data_testing$Compliant..Y.N.)
#create undersampled model
NBclassfier_under <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material,
data=data_under)
#Making predictions on undersampled model
pred_NB_under <- predict(NBclassfier_under, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_under, data_testing$Compliant..Y.N.)
#Create oversampled model
NBclassfier_over <- naiveBayes(Compliant..Y.N. ~ Shipper.Country + Port.of.Entry..map. + Goods.Category + Packaging.Material ,
data=data_over)
#Making predictions on oversampled model
pred_NB_over <- predict(NBclassfier_over, newdata= data_testing, type = "class")
#confusion matrix
confusionMatrix(pred_NB_over, data_testing$Compliant..Y.N.)
#Create naive bayes model with crossvalidation
NBclassfier_cv<- train(y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#predictions
pred_NB_cv <- predict(NBclassfier_cv, newdata= data_testing, type = "raw")
#confusion matrix
confusionMatrix(pred_NB_cv, data_testing$Compliant..Y.N.)
#Create NB oversampled model with CV
NBclassfier_cv_over<- train(y = data_over$Compliant..Y.N.,
x = data_over[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#predictions
pred_NB_cv_over <- predict(NBclassfier_cv_over, newdata= data_testing, type = "raw")
#confusion matrix
confusionMatrix(pred_NB_cv_over, data_testing$Compliant..Y.N.)
#Create NB undersampled model with CV
NBclassfier_cv_under<- train(y = data_under$Compliant..Y.N.,
x = data_under[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
#predictions
pred_NB_cv_under <- predict(NBclassfier_cv_under, newdata= data_testing, type = "raw")
#confusion matrix
confusionMatrix(pred_NB_cv_under, data_testing$Compliant..Y.N.)
train.default(x = data_under[,c(3,8,9,10)] , y = data_under$Compliant..Y.N., method = "nb",
trControl = trainControl(method = "cv", number = 10))
NBclassfier_cv_under_test<- train(y = data_under$Compliant..Y.N.,
x = data_under[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
NBclassfier_cv_under_test<- train(y = data_under$Compliant..Y.N.,
x = data_under[,c(3,8,9,10)],
method = "nb")
pred_NB_cv_under_test <- predict(NBclassfier_cv_under, newdata= data_testing, type = "raw")
confusionMatrix(pred_NB_cv_under_test, data_testing$Compliant..Y.N.)
#confusion matrix
confusionMatrix(pred_NB_cv_under, data_testing$Compliant..Y.N.)
NBclassfier_cv_under_test<- train(y = data_under$Compliant..Y.N.,
x = data_under[,c(3,8,9,10)],
method = "nb",trControl = trainControl(method = "cv", number = 1))
pred_NB_cv_under_test <- predict(NBclassfier_cv_under, newdata= data_testing, type = "raw")
confusionMatrix(pred_NB_cv_under_test, data_testing$Compliant..Y.N.)
confusionMatrix(pred_SVM, data_testing$Compliant..Y.N.)
SVM <- train (y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "svmRadialWeights",
trControl = trainControl(method = "cv", number = 10))
SVM <- train (y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "svmRadialWeights",
trControl = trainControl(method = "cv", number = 10))
pred <- predict(SVM, newdata= data_testing, type = "class")
SVM <- train (y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "svmLinear",
trControl = trainControl(method = "cv", number = 10))
SVM <- train (y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "svmPoly",
trControl = trainControl(method = "cv", number = 10))
#SVM alternate implementation using CARET
SVM <- train (y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "svmPoly",
allowParallel = TRUE,
trControl = trainControl(method = "cv", number = 10))
#C5.0 using CARET
SVM <- train (y = data_training$Compliant..Y.N.,
x = data_training[,c(3,8,9,10)],
method = "C5.0",
allowParallel = TRUE,
trControl = trainControl(method = "cv", number = 10))
#Create NB undersampled model with CV
NBclassfier_cv_under<- train(y = data_under$Compliant..Y.N.,
x = data_under[,c(3,8,9,10)],
method = "nb",
trControl = trainControl(method = "cv", number = 10))
remove.packages("caret", lib="~/R/win-library/3.4")
install.packages("caret")
